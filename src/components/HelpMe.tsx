/* eslint-disable react/no-children-prop */
import { createRef, useEffect, useMemo, useState } from 'react';
import ReactMarkdown from 'react-markdown';
import rehypeRaw from 'rehype-raw';
import { QuestionMarkCircleIcon } from '@heroicons/react/24/outline';
import { Link } from 'react-router-dom';
import { Button } from './Button';
import {
  SmartContractIcon,
  ViewIcon,
  ContactUsIcon,
  UserIcon,
  ViewBuilderIcon,
  DocumentIcon,
} from './svg';
import { Page } from 'types';
import { classes } from 'utils';
import { Details, Summary } from './Details';

type HelpPage = {
  title: string;
  md?: string;
  Icon: React.ReactNode;
  open?: string;
  button?: {
    label: string;
    link: string;
  };
  embeddedUrl?: string;
};

const HELP_PAGES: Partial<Record<Page | 'SmartContractList', HelpPage>> = {
  SmartContract: {
    title: 'Smart Contract Page',
    md: `On this page, you can explore all the smart contracts published in the Timegraph. When you
click on a particular smart contract, you’ll be able to explore different aspects of the
smart contract, such as:
- Name of the smart contract, its description, and tags.
- Smart contract details, including the publisher address, contract address, and the date
the contract was deployed on the Timegraph.
- Contract information that lists the available functions and the contract’s Application
Binary Interface (ABI).`,
    Icon: <SmartContractIcon className="h-[18px] w-[14px]  text-white" />,
    button: {
      label: 'Learn More',
      link: 'https://docs.analog.one/documentation/smart-contract-request',
    },
    embeddedUrl: 'https://jumpshare.com/embed/Rg5Mzf0mAfRTvNF5ptuQ',
  },
  View: {
    title: 'View Page',
    md: `On this page, you can explore different sections of the View, including:
- View details. This displays the name, description, and tags associated with this View. It also shows the publisher’s (creator’s) address, hash ID, and the date the View was created.
- Definition. This section displays the SQL statement the Timegraph Server executed to generate the View results.
- Data. This section has two tabs: the “Data” tab, which displays the View results, and the “Collections” tab, which shows you a list of collections the View aggregated data from.`,
    Icon: <ViewIcon className="h-[18px] w-[18px]" />,
    button: {
      label: 'Learn More',
      link: 'https://docs.analog.one/documentation/developer-guide/publish-views',
    },
    embeddedUrl: 'https://jumpshare.com/embed/zhy84C8AGzGXFLEHaxTx',
  },
  ViewBuilder: {
    title: 'View Builder',
    md: `<span>The View Builder has three panes:</span>
- <span className="font-extrabold">Smart Contracts</span>, which displays a list of published smart contracts.
- <span className="font-extrabold">Your Query</span>, <span>which displays a list of functions to be queried from selected smart contracts. When you choose a function you’d like to query from a contract, the View Builder automatically populates the “Your Query” section with that function and expands the input and output parameters. If required, you can use the input section to customize the function arguments, but you cannot edit the output parameters.</span>
- <span className="font-extrabold">Console</span>, <span>which has two tabs: “Definition” and “Test Run.” The “Definition” tab displays the generated SQL statements based on the function(s) and arguments you have specified, while the “Test Run” tab allows you to test the output of the query.</span>

To create a new View:
- <span>Select the smart contract(s) you’d like the View to use from the “Smart Contracts” tab. You can search the smart contract by tags or use the chain tags.</span>
- <span>Once you’ve selected the smart contract, it expands to show the functions within that contract. Select the functions you’d like to query by checking the corresponding checkboxes. This will automatically populate the“Your Query” pane with selected smart contracts and their corresponding functions. You can customize the input parameters if necessary.</span>
- <span>Confirm that the autogenerated SQL statements match your View use case requirements in the “Definition” tab of the Console pane. Depending on the output you intend to achieve, you can modify the SQL statements directly within the Console tab and test the View results by clicking on the “Test Run” tab.</span>
- <span>If satisfied with the View results, click the “Deploy View” button.</span>
- <span>Enter the name, tag(s), and the description of the View on the “Create new View” page that is displayed and click on the “Create” button.</span>
- <span>Congrats! You’ve successfully created a new View.</span>`,
    button: {
      label: 'Learn More',
      link: 'https://docs.analog.one/documentation/developer-guide/publish-views',
    },
    Icon: <ViewBuilderIcon className="h-[18px] w-[18px]" />,
    embeddedUrl: 'https://jumpshare.com/embed/LSkaCbaRWm4RSkljcfDg',
  },
  SmartContractList: {
    title: 'Smart Contract List',
    md: `The Smart Contract is the first artifact that Analog Watch uses to collect data from supported chains. When a DApp adds data to a blockchain through a Smart Contract, Analog Watch extracts the appropriate data from new blocks and adds it to appropriate Views. To list a new Smart Contract:
- Click on the “Smart Contract” tab.
- Enter the Contract address, identifier, and the instance (e.g., testnet or mainnet) on the page that appears. Specify the supported chain and click the “Next” button. Analog Watch should be able to verify the contract automatically. For Contracts that cannot be verified, paste their ABIs in the text field of the new page displayed and click the “Next” button.
- Select the functions you’d like to query from the Smart Contract and click the “List” button.
- Congrats! You have successfully listed a new Smart Contract. You can now display the Contract details by clicking the “See Smart Contract” button.
`,
    Icon: <DocumentIcon className="h-[18px] w-[14px]  text-white" />,
  },
  MyProfile: {
    title: 'My Profile Page',
    md: `You can check the status of your account information on this page, including aspects like:
- Account balance.
- Wallet address.
- Published Timegraph artifacts (i.e., smart contracts, collections, and views) associated with the wallet address, total rewards, and amount of $TANLOG tokens spent.
- API keys linked to the wallet address. You can also create new API keys.
- Quick links you can use to deploy your own collections and views.`,
    Icon: <UserIcon className="h-[18px] w-[18px]" />,
    embeddedUrl: 'https://jumpshare.com/embed/xIzcd6fH6LdreBN8KhPX',
  },
  ContactUs: {
    title: 'Contact Us',
    open: 'mailto:support@analog.one',
    Icon: <ContactUsIcon className="h-[18px] w-[18px]" />,
  },
};

export function HelpMe() {
  const ref = createRef<HTMLDivElement>();
  const [isOpen, setIsOpen] = useState(false);
  const [openedSection, setOpenedSection] = useState<number | null>(null);
  const [userProgress, setUserProgress] = useState<number[]>([]);
  const progressStatus = useMemo(() => {
    return (userProgress.length / (Object.keys(HELP_PAGES).length - 1)) * 100;
  }, [userProgress.length]);

  useEffect(() => {
    const progress = JSON.parse(localStorage.getItem('helpProgress') || '{}')?.progress;
    if (progress) {
      setUserProgress(progress);
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('helpProgress', JSON.stringify({ progress: userProgress }));

    const iframeHandler = () => {
      setTimeout(() => {
        if (document.activeElement?.tagName === 'IFRAME') {
          //@ts-ignore
          if (!userProgress.includes(+document.activeElement.id)) {
            //@ts-ignore
            setUserProgress((arr) => [+document.activeElement.id, ...arr]);
          }
        }
      });
    };
    document.addEventListener('blur', iframeHandler, true);
    return () => document.removeEventListener('blur', iframeHandler, true);
  }, [userProgress]);

  useEffect(() => {
    const onClickOutside = ({ target }: MouseEvent) => {
      if (ref.current && !ref.current.contains(target as Node)) {
        setIsOpen(false);
      }
    };

    if (isOpen) {
      document.addEventListener('click', onClickOutside, true);
    } else {
      document.removeEventListener('click', onClickOutside, true);
    }
    return () => {
      document.removeEventListener('click', onClickOutside, true);
    };
  }, [isOpen, ref]);

  return (
    <div
      ref={ref}
      className={`fixed flex flex-col items-end space-y-4 md:right-10 right-3 bottom-10 z-30 font-["Neue_Montreal"]`}
    >
      {isOpen && (
        <div
          className={
            '!bg-gradient-to-b from-[#000_20.37%] to-[#000_79.34%] !border-[#1F1F1F] md:rounded-[24px] rounded-[14px] text-white absoluteright-0 bottom-16 card overflow-hidden'
          }
        >
          <div className="h-[478px] md:w-[360px] w-[295px] max-h-[478px] md:py-6 py-3">
            <div className="md:px-6 px-3">
              <h3 className="self-start uppercase text-lg leading-normal font-normal">
                Quick Start
              </h3>
              <div className="text-[#B2B3B8] text-xs font-normal font-['Neue Montreal'] leading-[18px] mt-1 mb-3">
                Wondering where to start? Here’s everything you’ll want to learn to get started with
                Analog Watch quickly.
              </div>
              <div className="h-[6px] w-full bg-[#ffffff1a] rounded-[17px] mb-[6px]">
                <div
                  className="bg-[linear-gradient(287deg,_var(--tw-gradient-stops))] from-[#7457B8_3%] via-[#B65ECA_45%] to-[#D97474_95%] h-full rounded-[17px] transition-[width] ease-linear delay-100"
                  style={{ width: `${progressStatus}%` }}
                ></div>
              </div>
              <div className="text-xs font-normal text-[#B2B3B8] mb-4">
                {progressStatus}% Completed
              </div>
            </div>
            <div className="flex flex-col space-y-2 h-[312px] md:px-6 px-3 overflow-x-hidden overflow-y-scroll scrollbar-dark">
              {Object.entries(HELP_PAGES).map(
                ([page, { title, Icon, md, open, button, embeddedUrl }], index) => {
                  if (!md && !embeddedUrl) {
                    return (
                      <div
                        className="group border border-[#ffffff1f] text-white bg-gradient-to-t from-[#0E0E0E_0%] to-[#0E0E0E_100%] rounded-2xl w-full h-[55px] border-none p-3 cursor-pointer"
                        onClick={() => {
                          window.open(open, '_self');
                        }}
                      >
                        <div className="relative flex mt-[-1px] items-center border-0 border-b border-[#ffffff1f] text-base border-none p-0">
                          <div className="bg-[#ffffff14] h-8 w-8 flex items-center justify-center rounded-lg mr-2">
                            {Icon}
                          </div>
                          <div className="text-sm">{title}</div>
                        </div>
                      </div>
                    );
                  }
                  return (
                    <Details
                      key={index}
                      open={openedSection === index}
                      className={classes(
                        'text-white bg-gradient-to-t from-[#0E0E0E_0%] to-[#0E0E0E_100%] rounded-2xl w-full border-none p-3 cursor-pointer',
                        (openedSection === index || userProgress.includes(index)) &&
                          'bg-none bg-transparent rounded-2xl border border-solid border-[#1F1F1F] p-[11px]'
                      )}
                      onClick={(e) => {
                        e.preventDefault();
                        if (openedSection !== index) {
                          setOpenedSection(index);
                        }
                        if (!embeddedUrl && !userProgress.includes(index)) {
                          setUserProgress((arr) => [index, ...arr]);
                        }
                      }}
                    >
                      <Summary
                        classNames={{
                          base: classes('border-none p-0 select-none'),
                        }}
                        onClick={() => {
                          if (openedSection === index) {
                            setOpenedSection(null);
                          }
                        }}
                      >
                        <div className="bg-[#ffffff14] h-8 w-8 flex items-center justify-center rounded-lg mr-2">
                          {Icon}
                        </div>
                        <div className="text-sm">{title}</div>
                      </Summary>
                      <div className="md:mt-2 mt-0 text-[#B2B3B8]">
                        {embeddedUrl && openedSection == index && (
                          <div className="md:w-[284px] w-[244px] h-[194px] bg-[#1c1c1c] relative">
                            <iframe
                              title="Embeded Help Video"
                              id={index.toString()}
                              src={embeddedUrl}
                              width="100%"
                              height="194"
                              allow="autoplay"
                              allowFullScreen
                            />
                          </div>
                        )}
                        <h4 className="md:mt-6 mt-3 mb-2 text-sm">{title}</h4>
                        {md && (
                          <ReactMarkdown
                            rehypePlugins={[rehypeRaw as never]}
                            className="markdown text-xs leading-[18px] !mb-0"
                          >
                            {md}
                          </ReactMarkdown>
                        )}
                        {button && (
                          <div className="flex space-x-2">
                            <Link
                              className="hyperlink flex items-center font-medium capitalize text-[12px] !text-[#B15EBE]"
                              to={button.link}
                              target="_blank"
                              onClick={(e) => e.stopPropagation()}
                            >
                              {button.label}
                            </Link>
                          </div>
                        )}
                      </div>
                    </Details>
                  );
                }
              )}
            </div>
          </div>
        </div>
      )}
      <Button
        variant="primary"
        className={classes(
          '!bg-white rounded-[9999px] to-red-400 h-12 justify-center items-center !border-none cursor-pointer select-none !py-3 px-6',
          !isOpen &&
            'bg-gradient-to-l from-slate-500 via-purple-500 !bg-transparent rounded-xl !px-3'
        )}
        onClick={() => {
          setIsOpen((prev) => !prev);
        }}
      >
        {!isOpen ? (
          <>
            <QuestionMarkCircleIcon className="w-7 h-7" />
          </>
        ) : (
          <div className="text-black text-base capitalize">Close</div>
        )}
      </Button>
    </div>
  );
}
